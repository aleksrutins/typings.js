// Type mappings. Key is type name, value is a function that:
// Returns true if x is of the key type
// Returns false otherwise.
// And a function that creates the type.
const types = new Map([
    ["int", [x => Number.isInteger(x), () => 0]],
    ["string", [x => typeof x === "string", () => ""]],
    ["float", [x => !isNaN(parseFloat(x)), () => 0.0]],
    ["bool", [x => typeof x === "boolean", () => false]]
]);
//create a typed variable. type is the type name or constructor, and value is the value.
export function createTypedVar(tipe, value) {
    let _val = value;
    let res = function () {
        if (arguments.length >= 1) {
            if (!typeCheck(tipe, arguments[0])) {
                throw new TypeError("Expected type: " + tipe + ", got: " + typeof arguments[0]);
            }
            else {
                _val = arguments[0];
            }
            return;
        }
        return _val;
    };
    return res;
}
export function createGenericClass(genArgs, proto) {
    let res = (...args) => {
        let i = 0;
        var typeArgs = {};
        for (let arg of genArgs) {
            typeArgs[arg] = args[i++];
        }
        return proto(typeArgs);
    };
    return res;
}
export function typeCheck(tipe, obj) {
    if (typeof tipe === "string") {
        return types.get(tipe)[0](obj);
    }
    else {
        return obj instanceof tipe;
    }
}
export function instantiate(tipe) {
    return typeof tipe === "string"
        ? types.get(tipe)[1]()
        : new tipe();
}
export function extend(obj, cls) {
    for (let key in cls.prototype) {
        if (cls.hasOwnProperty(key))
            Object.defineProperty(obj, key, Object.getOwnPropertyDescriptor(cls.prototype, key));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsNkRBQTZEO0FBQzdELHVDQUF1QztBQUN2QywyQkFBMkI7QUFDM0Isd0NBQXdDO0FBQ3hDLE1BQU0sS0FBSyxHQUE0QixJQUFJLEdBQUcsQ0FBcUI7SUFDakUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNyRCxDQUFDLENBQUM7QUFDSCx3RkFBd0Y7QUFDeEYsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsSUFBaUIsRUFDakIsS0FBUTtJQUVSLElBQUksSUFBSSxHQUFNLEtBQUssQ0FBQztJQUNwQixJQUFJLEdBQUcsR0FBRztRQUNSLElBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxTQUFTLENBQ2pCLGlCQUFpQixHQUFHLElBQUksR0FBRyxTQUFTLEdBQUcsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQzNELENBQUM7YUFDSDtpQkFBTTtnQkFDTCxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3JCO1lBQ0QsT0FBTztTQUNSO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7SUFDRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFDRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLE9BQWlCLEVBQ2pCLEtBQUs7SUFFTCxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBcUIsRUFBRSxFQUFFO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNsQixLQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtZQUN2QixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDM0I7UUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFDRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFDRCxNQUFNLFVBQVUsU0FBUyxDQUFJLElBQWlCLEVBQUUsR0FBTTtJQUNwRCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDeEM7U0FBTTtRQUNMLE9BQU8sR0FBRyxZQUFzQixJQUFJLENBQUM7S0FDdEM7QUFDSCxDQUFDO0FBQ0QsTUFBTSxVQUFVLFdBQVcsQ0FBSSxJQUFpQjtJQUM5QyxPQUFPLE9BQU8sSUFBSSxLQUFLLFFBQVE7UUFDN0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDOUIsQ0FBQyxDQUFDLElBQTBCLElBQUssRUFBRSxDQUFDO0FBQ3hDLENBQUM7QUFDRCxNQUFNLFVBQVUsTUFBTSxDQUFJLEdBQUcsRUFBRSxHQUFtQjtJQUNoRCxLQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7UUFDNUIsSUFBRyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztZQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2xIO0FBQ0gsQ0FBQyJ9